/*
 * Firecracker API
 *
 * RESTful public-facing API. The API is accessible through HTTP calls on specific URLs carrying JSON modeled data. The transport medium is a Unix Domain Socket.
 *
 * The version of the OpenAPI document: 1.9.0-dev
 * Contact: compute-capsule@amazon.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// Vm : Defines the microVM running state. It is especially useful in the snapshotting context.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Vm {
    #[serde(rename = "state")]
    pub state: State,
}

impl Vm {
    /// Defines the microVM running state. It is especially useful in the snapshotting context.
    pub fn new(state: State) -> Vm {
        Vm { state }
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum State {
    #[serde(rename = "Paused")]
    Paused,
    #[serde(rename = "Resumed")]
    Resumed,
}

impl Default for State {
    fn default() -> State {
        Self::Paused
    }
}
